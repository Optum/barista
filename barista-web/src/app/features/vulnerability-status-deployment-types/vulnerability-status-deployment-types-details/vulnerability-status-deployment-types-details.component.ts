import { Component, OnDestroy, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import {
  DeploymentType,
  DeploymentTypeApiService,
  ProjectScanStatusTypeApiService,
  SecurityScanResultItemStatusTypeApiService,
  VulnerabilityStatusDeploymentType,
  VulnerabilityStatusDeploymentTypeApiService,
} from '@app/shared/api';
import { ComponentWithMessage } from '@app/shared/app-components/ComponentWithMessage';
import { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';
import * as _ from 'lodash';

@Component({
  selector: 'app-vulnerability-status-deployment-types-details',
  templateUrl: './vulnerability-status-deployment-types-details.component.html',
  styleUrls: ['./vulnerability-status-deployment-types-details.component.scss'],
})
export class VulnerabilityStatusDeploymentTypesDetailsComponent extends ComponentWithMessage
  implements OnInit, OnDestroy {
  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private service: VulnerabilityStatusDeploymentTypeApiService,
    private deploymentTypeService: DeploymentTypeApiService,
    private securityScanResultItemStatusTypeApiService: SecurityScanResultItemStatusTypeApiService,
    private projectScanStatusTypeApiService: ProjectScanStatusTypeApiService,
  ) {
    super();
  }

  fields: FormlyFieldConfig[] = [];
  form = new FormGroup({});

  formFieldDeploymentTypes = {
    key: 'deploymentType',
    type: 'select',
    defaultValue: null,
    templateOptions: {
      label: 'Deployment Type',
      required: true,
      options: null,
      labelProp: 'description',
      valueProp: 'code',
    },
  };
  formFieldSecurityScanStatus = {
    key: 'securityScanStatus',
    type: 'select',
    templateOptions: {
      label: 'Security Scan Status',
      required: true,
      options: null,
      labelProp: 'description',
      valueProp: 'code',
    },
  };
  formFieldSecurityStatus = {
    key: 'securityStatus',
    type: 'select',
    templateOptions: {
      label: 'Security Status',
      required: true,
      options: null,
      labelProp: 'description',
      valueProp: 'code',
    },
  };

  id: any;
  isBusy: boolean;
  isNew: boolean;
  model = {
    deploymentType: null,
    securityScanStatus: null,
    securityStatus: null,
  };
  options: FormlyFormOptions = {
    formState: {
      awesomeIsForced: false,
    },
  };

  ngOnDestroy(): void {}

  async ngOnInit() {
    this.isBusy = true;
    this.formFieldDeploymentTypes.templateOptions.options = await this.deploymentTypeService
      .deploymentTypeGet()
      .toPromise();
    this.formFieldSecurityScanStatus.templateOptions.options = await this.securityScanResultItemStatusTypeApiService
      .securityScanResultItemStatusTypeGet()
      .toPromise();
    this.formFieldSecurityStatus.templateOptions.options = await this.projectScanStatusTypeApiService
      .projectScanStatusTypeGet()
      .toPromise();

    this.id = this.route.snapshot.paramMap.get('id');
    this.isNew = this.id === 'new';
    if (this.isNew) {
      this.model.deploymentType = _.find(this.formFieldDeploymentTypes.templateOptions.options, {
        isDefault: true,
      }).code;
      this.model.securityScanStatus = _.find(this.formFieldSecurityScanStatus.templateOptions.options, {
        isDefault: true,
      }).code;
      this.model.securityStatus = _.find(this.formFieldSecurityStatus.templateOptions.options, {
        isDefault: true,
      }).code;
    } else {
      const res = await this.service.vulnerabilityStatusDeploymentTypeIdGet(+this.id).toPromise();
      this.model.deploymentType = res.deploymentType.code;
      this.model.securityScanStatus = res.securityStatus.code;
      this.model.securityStatus = res.projectScanStatus.code;
    }

    this.fields = [this.formFieldDeploymentTypes, this.formFieldSecurityScanStatus, this.formFieldSecurityStatus];
    this.isBusy = false;
  }

  async onSubmit() {
    if (this.isNew) {
      await this.service
        .vulnerabilityStatusDeploymentTypePost({
          deploymentType: { code: this.model.deploymentType } as DeploymentType,
          projectScanStatus: { code: this.model.securityStatus },
          securityStatus: { code: this.model.securityScanStatus },
        } as VulnerabilityStatusDeploymentType)
        .toPromise();
      this.showMessage('Entry successfully created.');
    } else {
      await this.service
        .vulnerabilityStatusDeploymentTypePost({
          id: +this.id,
          deploymentType: { code: this.model.deploymentType } as DeploymentType,
          projectScanStatus: { code: this.model.securityStatus },
          securityStatus: { code: this.model.securityScanStatus },
        } as VulnerabilityStatusDeploymentType)
        .toPromise();
      this.showMessage('Entry successfully updated.');
    }

    setTimeout(() => {
      return this.router.navigate(['vulnerability-status-deployment-type']);
    }, 500);
  }
}
